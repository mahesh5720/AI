##depth first search
def dfs():
     #graph to be explored, implemented using dictionary
    g = {"A":["B", "D"],
     "B":["A", "C"],
     "C":["B"],
     "D":["A","E","F"],
     "E":["D", "F", "G"],
     "F":["D", "E", "H"],
     "G":["E", "H"],
     "H":["G","F"]
    }
    print("The graph with adjacent nodes is:\n")
    print(g)
    def DFS(graph,start):
        stack=[start] #add nodes yet to be checked
        explored=[] #add nodes already checked
        while stack: #execute while loop until the list "stack" is empty
            node = stack.pop() #gets first element of the list "stack"
            if node not in explored:
                explored.append(node) #add node to the list "explored"
                neighbours = graph[node] #assign neighbours of the node
            for n in reversed(neighbours):
                if n not in explored:
                    stack.append(n) #adds neighbours of the node to the list "queue"
        return explored
    print('The source node is A')
    print("Depth first search:")
    print(DFS(g,'A'))
dfs();
